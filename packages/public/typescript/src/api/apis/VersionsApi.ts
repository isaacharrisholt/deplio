/* tslint:disable */
/* eslint-disable */
/**
 * Deplio
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-02-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  HTTPValidationError,
  Versions,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    VersionsFromJSON,
    VersionsToJSON,
} from '../models/index';

export interface VersionsApiGetRequest {
    deplio_version?: Date;
}

/**
 * VersionsApi - interface
 * 
 * @export
 * @interface VersionsApiInterface
 */
export interface VersionsApiInterface {
    /**
     * Retrieve the latest version of the API, along with your current version and (if using a team API key) your team\'s API version.
     * @summary Get API versions
     * @param {Date} [deplio_version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApiInterface
     */
    getRaw(requestParameters: VersionsApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Versions>>;

    /**
     * Retrieve the latest version of the API, along with your current version and (if using a team API key) your team\'s API version.
     * Get API versions
     */
    get(requestParameters: VersionsApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Versions>;

}

/**
 * 
 */
export class VersionsApi extends runtime.BaseAPI implements VersionsApiInterface {

    /**
     * Retrieve the latest version of the API, along with your current version and (if using a team API key) your team\'s API version.
     * Get API versions
     */
    async getRaw(requestParameters: VersionsApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Versions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.deplio_version !== undefined && requestParameters.deplio_version !== null) {
            headerParameters['deplio-version'] = String(requestParameters.deplio_version);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionsFromJSON(jsonValue));
    }

    /**
     * Retrieve the latest version of the API, along with your current version and (if using a team API key) your team\'s API version.
     * Get API versions
     */
    async get(requestParameters: VersionsApiGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Versions> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
