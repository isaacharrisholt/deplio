/* tslint:disable */
/* eslint-disable */
/**
 * Deplio
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-02-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetQMessagesResponse,
  HTTPValidationError,
  MessageRequest,
  PostQMessagesResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetQMessagesResponseFromJSON,
    GetQMessagesResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageRequestFromJSON,
    MessageRequestToJSON,
    PostQMessagesResponseFromJSON,
    PostQMessagesResponseToJSON,
} from '../models/index';

export interface ListDeplioQMessagesQGetRequest {
    page?: number;
    pageSize?: number;
    deplioVersion?: Date;
}

export interface PostMessagesToDeplioQQPostRequest {
    messageRequest: MessageRequest;
    deplioVersion?: Date;
}

/**
 * 
 */
export class DeplioQApi extends runtime.BaseAPI {

    /**
     * Get a list of messages that have been sent to Deplio Q and their responses (if any).
     * List Deplio Q Messages
     */
    async listDeplioQMessagesQGetRaw(requestParameters: ListDeplioQMessagesQGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQMessagesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.deplioVersion !== undefined && requestParameters.deplioVersion !== null) {
            headerParameters['deplio-version'] = String(requestParameters.deplioVersion);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/q`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of messages that have been sent to Deplio Q and their responses (if any).
     * List Deplio Q Messages
     */
    async listDeplioQMessagesQGet(requestParameters: ListDeplioQMessagesQGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQMessagesResponse> {
        const response = await this.listDeplioQMessagesQGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send messages to Deplio Q to be processed asynchronously.
     * Post Messages To Deplio Q
     */
    async postMessagesToDeplioQQPostRaw(requestParameters: PostMessagesToDeplioQQPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostQMessagesResponse>> {
        if (requestParameters.messageRequest === null || requestParameters.messageRequest === undefined) {
            throw new runtime.RequiredError('messageRequest','Required parameter requestParameters.messageRequest was null or undefined when calling postMessagesToDeplioQQPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.deplioVersion !== undefined && requestParameters.deplioVersion !== null) {
            headerParameters['deplio-version'] = String(requestParameters.deplioVersion);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/q`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageRequestToJSON(requestParameters.messageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostQMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Send messages to Deplio Q to be processed asynchronously.
     * Post Messages To Deplio Q
     */
    async postMessagesToDeplioQQPost(requestParameters: PostMessagesToDeplioQQPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostQMessagesResponse> {
        const response = await this.postMessagesToDeplioQQPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
