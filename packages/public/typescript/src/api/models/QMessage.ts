/* tslint:disable */
/* eslint-disable */
/**
 * Deplio
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-02-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Body } from './Body';
import {
    BodyFromJSON,
    BodyFromJSONTyped,
    BodyToJSON,
} from './Body';
import type { Headers } from './Headers';
import {
    HeadersFromJSON,
    HeadersFromJSONTyped,
    HeadersToJSON,
} from './Headers';
import type { ModelHTTPMethod } from './ModelHTTPMethod';
import {
    ModelHTTPMethodFromJSON,
    ModelHTTPMethodFromJSONTyped,
    ModelHTTPMethodToJSON,
} from './ModelHTTPMethod';

/**
 * 
 * @export
 * @interface QMessage
 */
export interface QMessage {
    /**
     * 
     * @type {string}
     * @memberof QMessage
     */
    destination: string;
    /**
     * 
     * @type {Body}
     * @memberof QMessage
     */
    body?: Body;
    /**
     * 
     * @type {ModelHTTPMethod}
     * @memberof QMessage
     */
    method: ModelHTTPMethod;
    /**
     * 
     * @type {Headers}
     * @memberof QMessage
     */
    headers?: Headers;
}

/**
 * Check if a given object implements the QMessage interface.
 */
export function instanceOfQMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "method" in value;

    return isInstance;
}

export function QMessageFromJSON(json: any): QMessage {
    return QMessageFromJSONTyped(json, false);
}

export function QMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): QMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'destination': json['destination'],
        'body': !exists(json, 'body') ? undefined : BodyFromJSON(json['body']),
        'method': ModelHTTPMethodFromJSON(json['method']),
        'headers': !exists(json, 'headers') ? undefined : HeadersFromJSON(json['headers']),
    };
}

export function QMessageToJSON(value?: QMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'destination': value.destination,
        'body': BodyToJSON(value.body),
        'method': ModelHTTPMethodToJSON(value.method),
        'headers': HeadersToJSON(value.headers),
    };
}

