/* tslint:disable */
/* eslint-disable */
/**
 * Deplio
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-02-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Body } from './Body';
import {
    BodyFromJSON,
    BodyFromJSONTyped,
    BodyToJSON,
} from './Body';
import type { DeletedAt } from './DeletedAt';
import {
    DeletedAtFromJSON,
    DeletedAtFromJSONTyped,
    DeletedAtToJSON,
} from './DeletedAt';
import type { Headers } from './Headers';
import {
    HeadersFromJSON,
    HeadersFromJSONTyped,
    HeadersToJSON,
} from './Headers';
import type { ModelHTTPMethod } from './ModelHTTPMethod';
import {
    ModelHTTPMethodFromJSON,
    ModelHTTPMethodFromJSONTyped,
    ModelHTTPMethodToJSON,
} from './ModelHTTPMethod';
import type { QResponse } from './QResponse';
import {
    QResponseFromJSON,
    QResponseFromJSONTyped,
    QResponseToJSON,
} from './QResponse';
import type { QueryParams } from './QueryParams';
import {
    QueryParamsFromJSON,
    QueryParamsFromJSONTyped,
    QueryParamsToJSON,
} from './QueryParams';

/**
 * 
 * @export
 * @interface QRequestWithResponses
 */
export interface QRequestWithResponses {
    /**
     * 
     * @type {string}
     * @memberof QRequestWithResponses
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof QRequestWithResponses
     */
    createdAt: Date;
    /**
     * 
     * @type {DeletedAt}
     * @memberof QRequestWithResponses
     */
    deletedAt: DeletedAt;
    /**
     * 
     * @type {string}
     * @memberof QRequestWithResponses
     */
    teamId: string;
    /**
     * 
     * @type {string}
     * @memberof QRequestWithResponses
     */
    apiKeyId: string;
    /**
     * 
     * @type {string}
     * @memberof QRequestWithResponses
     */
    destination: string;
    /**
     * 
     * @type {ModelHTTPMethod}
     * @memberof QRequestWithResponses
     */
    method: ModelHTTPMethod;
    /**
     * 
     * @type {Body}
     * @memberof QRequestWithResponses
     */
    body: Body;
    /**
     * 
     * @type {Headers}
     * @memberof QRequestWithResponses
     */
    headers: Headers;
    /**
     * 
     * @type {QueryParams}
     * @memberof QRequestWithResponses
     */
    queryParams: QueryParams;
    /**
     * 
     * @type {Array<QResponse>}
     * @memberof QRequestWithResponses
     */
    responses: Array<QResponse>;
}

/**
 * Check if a given object implements the QRequestWithResponses interface.
 */
export function instanceOfQRequestWithResponses(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "deletedAt" in value;
    isInstance = isInstance && "teamId" in value;
    isInstance = isInstance && "apiKeyId" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "body" in value;
    isInstance = isInstance && "headers" in value;
    isInstance = isInstance && "queryParams" in value;
    isInstance = isInstance && "responses" in value;

    return isInstance;
}

export function QRequestWithResponsesFromJSON(json: any): QRequestWithResponses {
    return QRequestWithResponsesFromJSONTyped(json, false);
}

export function QRequestWithResponsesFromJSONTyped(json: any, ignoreDiscriminator: boolean): QRequestWithResponses {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'deletedAt': DeletedAtFromJSON(json['deleted_at']),
        'teamId': json['team_id'],
        'apiKeyId': json['api_key_id'],
        'destination': json['destination'],
        'method': ModelHTTPMethodFromJSON(json['method']),
        'body': BodyFromJSON(json['body']),
        'headers': HeadersFromJSON(json['headers']),
        'queryParams': QueryParamsFromJSON(json['query_params']),
        'responses': ((json['responses'] as Array<any>).map(QResponseFromJSON)),
    };
}

export function QRequestWithResponsesToJSON(value?: QRequestWithResponses | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': (value.createdAt.toISOString()),
        'deleted_at': DeletedAtToJSON(value.deletedAt),
        'team_id': value.teamId,
        'api_key_id': value.apiKeyId,
        'destination': value.destination,
        'method': ModelHTTPMethodToJSON(value.method),
        'body': BodyToJSON(value.body),
        'headers': HeadersToJSON(value.headers),
        'query_params': QueryParamsToJSON(value.queryParams),
        'responses': ((value.responses as Array<any>).map(QResponseToJSON)),
    };
}

