name: "Deploy"

on:
  push:
    branches:
      - main
      - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  ENV: ${{ github.ref_name == 'production' && 'prod' || 'dev' }}

jobs:
  terraform:
    name: "Deploy Terraform infrastructure"
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    defaults:
      run:
        working-directory: "./terraform"
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TERRAFORM_WORKSPACE: ${{ github.ref_name == 'production' && 'prod' || 'dev' }}
      DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4
      - name: Init
        run: terraform init
      - name: Create workspace
        run: terraform workspace new ${{ env.TERRAFORM_WORKSPACE }}
        continue-on-error: true
      - name: Select workspace
        run: terraform workspace select ${{ env.TERRAFORM_WORKSPACE }}
      - name: Validate
        run: terraform validate
      - name: Plan
        run: terraform plan -no-color -input=false -var="doppler_token=${{ env.DOPPLER_TOKEN }}"
      - name: Apply
        run: terraform apply -auto-approve -input=false -var="doppler_token=${{ env.DOPPLER_TOKEN }}"

  api:
    name: API deployment
    needs: [terraform]
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    defaults:
      run:
        working-directory: "./backend/api"
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Fly
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy
        run: flyctl deploy --remote-only --config fly.${{ env.ENV }}.toml
