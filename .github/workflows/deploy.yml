name: "Deploy"

on:
  push:
    branches:
      - main
      - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  ENV: ${{ github.ref_name == 'production' && 'prod' || 'dev' }}

jobs:
  supabase-migrations:
    name: Deploy migrations
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      GITHUB_CLIENT_ID: ${{ secrets.DEPLIO_GITHUB_CLIENT_ID }}
      GITHUB_CLIENT_SECRET: ${{ secrets.DEPLIO_GITHUB_CLIENT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: 1.150.0
      - name: Link Supabase
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --password ${{ secrets.SUPABASE_DB_PASSWORD }}
      - name: Deploy Migrations
        run: |
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}

  terraform:
    name: "Deploy Terraform infrastructure"
    runs-on: ubuntu-latest
    needs: [supabase-migrations]
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    defaults:
      run:
        working-directory: "./terraform"
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TERRAFORM_WORKSPACE: ${{ github.ref_name == 'production' && 'prod' || 'dev' }}
      DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      - name: Init
        run: terraform init
      - name: Create workspace
        run: terraform workspace new ${{ env.TERRAFORM_WORKSPACE }}
        continue-on-error: true
      - name: Select workspace
        run: terraform workspace select ${{ env.TERRAFORM_WORKSPACE }}
      - name: Validate
        run: terraform validate
      - name: Plan
        run: terraform plan -no-color -input=false -var="doppler_token=${{ env.DOPPLER_TOKEN }}"
      - name: Apply
        run: terraform apply -auto-approve -input=false -var="doppler_token=${{ env.DOPPLER_TOKEN }}"

  api:
    name: API deployment
    needs: [terraform]
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    defaults:
      run:
        working-directory: "./backend/api"
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Fly
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy
        run: flyctl deploy --remote-only --config fly.${{ env.ENV }}.toml

  frontend:
    name: Deploy frontend
    needs: [api]
    timeout-minutes: 15
    environment: ${{ github.ref_name == 'production' && 'production' || 'dev' }}
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.10.5
          run_install: true
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
          cache: "pnpm"
          cache-dependency-path: "./pnpm-lock.yaml"
      - name: Install CLI tools
        run: |
          pnpm install turbo --global
          pnpm install vercel@latest --global
      - name: Vercel Link
        run: vercel link --repo --yes --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.TURBO_TEAM }}
      - name: Vercel Deploy (preview)
        id: deploy
        if: env.BRANCH_NAME != 'production'
        run: |
          vercel deploy --force --with-cache --no-wait --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.TURBO_TEAM }} --yes --env preview --meta githubCommitRef=${{ env.BRANCH_NAME }} --cwd frontend
      - name: Vercel Deploy (production)
        if: env.BRANCH_NAME == 'production'
        run: |
          vercel deploy --force --with-cache --no-wait --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.TURBO_TEAM }} --cwd ${{ matrix.app }} --yes --prod --meta githubCommitRef=${{ env.BRANCH_NAME }} --cwd frontend
